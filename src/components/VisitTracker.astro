---
// filepath: c:\Users\gregw\retrograde-meridian\src\components\VisitTracker.astro
import { pages, items } from '../data/pages.js';

export interface Props {
  pageId: string;
}

const { pageId } = Astro.props;
---

<script define:vars={{ pageId, pages, items }}>
  // Game state variables
  let visited = new Set();
  let inventory = []; // Changed from Set to Array
  let examUnlocked = false;
  let whodunitUnlocked = false;
  let timeReachedZero = false;

  // Initialize from localStorage
  try {
    const stored = localStorage.getItem("visitedPages");
    if (stored) {
      const parsed = JSON.parse(stored);
      if (Array.isArray(parsed)) {
        visited = new Set(parsed);
      }
    }

    const storedInventory = localStorage.getItem("inventory");
    if (storedInventory) {
      const parsedInventory = JSON.parse(storedInventory);
      if (Array.isArray(parsedInventory)) {
        inventory = parsedInventory; // Now directly uses the array
      }
    }

    examUnlocked = localStorage.getItem("examUnlocked") === "true";
    whodunitUnlocked = localStorage.getItem("whodunitUnlocked") === "true";
    timeReachedZero = localStorage.getItem("timeReachedZero") === "true";

    if (Array.isArray(pages)) {
      pages.forEach(page => {
        if (page.type === 'link') {
          const lockedState = localStorage.getItem(`locked_${page.filename}`);
          if (lockedState !== null) {
            page.initialLocked = lockedState === "true";
          }
        }
      });
    } else {
      console.error("Error: `pages` is not an array or is undefined.");
    }
  } catch (e) {
    console.error("Error loading game state:", e);
    localStorage.removeItem("visitedPages");
    localStorage.removeItem("inventory");
  }

  function updateInventoryDisplay() {
    const inventoryGrid = document.getElementById('inventory-grid');
    if (!inventoryGrid) return;

    inventoryGrid.innerHTML = ''; // Clear current grid
    
    // Debug: Print inventory items to console
    console.log("=== CURRENT INVENTORY ITEMS ===");
    if (inventory.length === 0) {
      console.log("No items in inventory");
    } else {
      // Create a count map of how many of each item we have
      const itemCounts = {};
      inventory.forEach(itemId => {
        if (!itemCounts[itemId]) {
          itemCounts[itemId] = 0;
        }
        itemCounts[itemId]++;
        
        const itemData = items[itemId];
        console.log(`â€¢ ${itemId}: ${itemData ? itemData.name : 'Unknown Item'}`);
      });
      
      // Process unique items (by ID)
      Object.keys(itemCounts).forEach(itemId => {
        const itemData = items[itemId];
        const itemCount = itemCounts[itemId];
        
        if (itemData && itemData.image) {
          const itemContainer = document.createElement('div');
          itemContainer.style.cssText = `
            padding: 10px 0;
            width: 100%;
            text-align: center;
            position: relative;
          `;
          
          // Create the image
          const img = document.createElement('img');
          img.src = itemData.image;
          img.alt = itemData.name;
          img.className = 'inventory-item';
          
          // Apply direct inline sizing
          img.style.maxWidth = '120px';
          img.style.maxHeight = '120px';
          img.style.width = 'auto';
          img.style.height = 'auto';
          img.style.margin = '15px auto';
          img.style.display = 'block';
          
          // Add the count badge if more than 1
          if (itemCount > 1) {
            const countBadge = document.createElement('div');
            countBadge.textContent = itemCount;
            countBadge.style.cssText = `
              position: absolute;
              bottom: 35px;
              right: calc(50% - 50px);
              background-color: rgba(0, 0, 0, 0.7);
              color: white;
              font-weight: bold;
              min-width: 30px;
              height: 30px;
              border-radius: 50%;
              display: flex;
              align-items: center;
              justify-content: center;
              font-size: 14px;
              border: 2px solid white;
              box-shadow: 0 0 3px rgba(0, 0, 0, 0.5);
            `;
            
            itemContainer.appendChild(img);
            itemContainer.appendChild(countBadge);
          } else {
            itemContainer.appendChild(img);
          }
          
          inventoryGrid.appendChild(itemContainer);
        }
      });
    }
    console.log("===============================");
  }

  function saveInventory() {
    try {
      localStorage.setItem("inventory", JSON.stringify(inventory));
    } catch (e) {
      console.error("Error saving inventory:", e);
    }
  }

  function updateCounter() {
    if (!Array.isArray(pages)) {
      console.error("Error: `pages` is not an array or is undefined.");
      return;
    }

    const countedVisitedPages = [...visited].filter(filename => {
      const page = pages.find(p => p.filename === filename);
      return page && page.counted !== false;
    });

    const visitedCount = countedVisitedPages.length;
    const remainingHours = Math.max(0, 11 - visitedCount);

    const counter = document.getElementById("counter");
    if (counter) {
      counter.textContent = remainingHours;
    } else {
      console.warn("Warning: `counter` element not found.");
    }

    const counterElement = counter?.parentElement;
    if (counterElement) {
      if (remainingHours <= 3) {
        counterElement.style.backgroundColor = '#ff0000';
      } else if (remainingHours <= 6) {
        counterElement.style.backgroundColor = '#ff4500';
      } else {
        counterElement.style.backgroundColor = '#8B0000';
      }
    }

    if (remainingHours === 0 && !timeReachedZero) {
      handleTimeReachedZero();
    }

    return remainingHours;
  }

  function handleTimeReachedZero() {
    timeReachedZero = true;
    examUnlocked = true;
    localStorage.setItem("timeReachedZero", "true");
    localStorage.setItem("examUnlocked", "true");

    try {
      showFinalLeadModal();
    } catch (e) {
      console.error("Error showing final lead modal:", e);
    }

    updateLinkStates();
  }

  function showFinalLeadModal() {
    const modal = document.createElement('div');
    modal.style.cssText = `
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.8);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 10000;
    `;

    const modalContent = document.createElement('div');
    modalContent.style.cssText = `
      background-color: #fff;
      padding: 30px;
      border-radius: 10px;
      text-align: center;
      max-width: 400px;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.5);
    `;

    modalContent.innerHTML = `
      <h2 style="color: #8B0000; margin-bottom: 20px;">Investigation Complete</h2>
      <p style="margin-bottom: 20px; line-height: 1.5;">This is your final lead. Finish your investigation and head to the Exam Tab.</p>
      <button id="modalClose" style="
        background-color: #8B0000;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
      ">Continue</button>
    `;

    modal.appendChild(modalContent);
    document.body.appendChild(modal);

    document.getElementById('modalClose').addEventListener('click', () => {
      document.body.removeChild(modal);
    });

    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        document.body.removeChild(modal);
      }
    });
  }

  function saveVisitedPages() {
    try {
      localStorage.setItem("visitedPages", JSON.stringify([...visited]));
    } catch (e) {
      console.error("Error saving visited pages:", e);
    }
  }

  function isLockableTab(filename) {
    const neverLock = ['notes', 'rules', 'intro', 'exam', 'whodunit'];
    return !neverLock.includes(filename);
  }

  function shouldTabBeLocked(filename) {
    const page = pages.find(p => p.filename === filename);
    if (!page) return false;

    // Always check if an item is required, regardless of whether the page has been visited
    if (page.requiresItem && !inventory.includes(page.requiresItem)) {
      return true;
    }

    if (page.initialLocked === true) {
      return true;
    }

    if (filename === 'exam') {
      return !examUnlocked;
    }
    if (filename === 'whodunit') {
      return !whodunitUnlocked;
    }

    if (!timeReachedZero) {
      return false;
    }

    if (isLockableTab(filename) && !visited.has(filename)) {
      return true;
    }

    return false;
  }

  function updateLinkStates() {
    if (!Array.isArray(pages)) {
      console.error("Error: `pages` is not an array or is undefined.");
      return;
    }

    const links = document.querySelectorAll('.nav-link');
    if (links.length === 0) {
      console.warn("Warning: No `.nav-link` elements found.");
      return;
    }

    links.forEach(link => {
      const filename = link.getAttribute('data-filename');
      if (!filename) return;

      link.classList.remove('visited', 'locked');

      const existingLock = link.querySelector('.lock-icon');
      if (existingLock) {
        existingLock.remove();
      }

      if (visited.has(filename)) {
        link.classList.add('visited');
      }

      if (shouldTabBeLocked(filename)) {
        link.classList.add('locked');

        const lockIcon = document.createElement('span');
        lockIcon.className = 'lock-icon';
        lockIcon.innerHTML = ' ðŸ”’';
        lockIcon.style.color = '#FFD700';
        link.appendChild(lockIcon);
      }
    });
  }

  function showNotification(message) {
    const mainElement = document.querySelector('.main');
    if (!mainElement) {
      console.warn("Warning: `.main` element not found. Notification not displayed.");
      return;
    }

    const notification = document.createElement('div');
    notification.className = 'notification';
    notification.textContent = message;
    notification.style.cssText = `
      background-color: rgba(139, 0, 0, 0.9);
      color: white;
      padding: 15px;
      margin-bottom: 20px;
      border-radius: 8px;
      text-align: center;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.5);
      animation: fadeIn 0.5s;
    `;
    
    mainElement.prepend(notification);

    setTimeout(() => {
      notification.style.animation = 'fadeOut 0.5s';
      setTimeout(() => {
        notification.remove();
      }, 500);
    }, 3000);
  }

    // New function to create the event box
  function showEventBox(messages) {
    const mainElement = document.querySelector('.main');
    if (!mainElement) {
      console.warn("Warning: `.main` element not found. Event box not displayed.");
      return;
    }

    // Find the first text-box in the main element
    const firstTextBox = mainElement.querySelector('.text-box');
    
    const eventBox = document.createElement('div');
    eventBox.className = 'event-box';
    eventBox.innerHTML = `
      <h3>Events</h3>
      <ul>
        ${messages.map(msg => `<li>${msg}</li>`).join('')}
      </ul>
      <button class="close-event-box">Close</button>
    `;
    
    // Add styles inline to ensure they're applied
    eventBox.style.cssText = `
      background-color: rgba(139, 0, 0, 0.9);
      color: white;
      padding: 15px 20px;
      border-radius: 8px;
      margin-bottom: 20px;
      position: relative;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
      border: 2px solid #ff6b6b;
      animation: fadeIn 0.5s;
    `;
    
    // Style for the close button
    const closeButton = eventBox.querySelector('.close-event-box');
    closeButton.style.cssText = `
      position: absolute;
      top: 10px;
      right: 10px;
      background-color: transparent;
      color: white;
      border: 1px solid white;
      border-radius: 4px;
      padding: 4px 8px;
      cursor: pointer;
      font-size: 12px;
    `;
    
    // Insert the event box before the first text box
    if (firstTextBox) {
      firstTextBox.parentNode.insertBefore(eventBox, firstTextBox);
    } else {
      mainElement.prepend(eventBox);
    }
    
    // Add event listener for the close button
    closeButton.addEventListener('click', () => {
      eventBox.style.animation = 'fadeOut 0.5s';
      setTimeout(() => {
        if (eventBox.parentNode) {
          eventBox.remove();
        }
      }, 500);
    });
    
    // Auto-close timeout has been removed
  }

  if (pageId && !visited.has(pageId)) {
    visited.add(pageId);
    saveVisitedPages();

    const currentPage = pages.find(p => p.filename === pageId);
    if (currentPage) {
      let eventMessages = [];

      // Handle adding multiple items
      if (currentPage.addsItems && Array.isArray(currentPage.addsItems)) {
        currentPage.addsItems.forEach(itemId => {
          inventory.push(itemId);
          eventMessages.push(`Item added: ${items[itemId].name}`);
        });
        saveInventory();
      }
      
      // Handle single item addition
      if (currentPage.addsItem) {
        inventory.push(currentPage.addsItem);
        saveInventory();
        eventMessages.push(`Item added: ${items[currentPage.addsItem].name}`);
      }

      if (currentPage.removesItem && inventory.includes(currentPage.removesItem)) {
        // Find and remove the first occurrence of the item
        const index = inventory.indexOf(currentPage.removesItem);
        if (index > -1) {
          inventory.splice(index, 1);
        }
        saveInventory();
        eventMessages.push(`Item used: ${items[currentPage.removesItem].name}`);
      }

      if (currentPage.unlocksOnVisit) {
        currentPage.unlocksOnVisit.forEach(filename => {
          const pageToUnlock = pages.find(p => p.filename === filename);
          if (pageToUnlock) {
            pageToUnlock.initialLocked = false;
            localStorage.setItem(`locked_${pageToUnlock.filename}`, "false");
            eventMessages.push(`${pageToUnlock.title} unlocked`);
          }
        });
      }

      if (currentPage.locksOnVisit) {
        currentPage.locksOnVisit.forEach(filename => {
          const pageToLock = pages.find(p => p.filename === filename);
          if (pageToLock) {
            pageToLock.initialLocked = true;
            localStorage.setItem(`locked_${pageToLock.filename}`, "true");
            eventMessages.push(`${pageToLock.title} locked`);
          }
        });
      }

      if (eventMessages.length > 0) {
        // Use the event box to show all events that happened
        showEventBox(eventMessages);
      }

      updateLinkStates();
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    updateCounter();
    updateInventoryDisplay();
    updateLinkStates(); // This will check item requirements on every page load

    // This listener handles the custom event from the exam page
    window.addEventListener('examCompleted', () => {
      console.log('Exam completion event received. Unlocking whodunit.');
      whodunitUnlocked = true;
      localStorage.setItem('whodunitUnlocked', 'true');
      updateLinkStates();
    });

    const links = document.querySelectorAll('.nav-link');
    links.forEach(link => {
      link.addEventListener('click', (e) => {
        const filename = link.getAttribute('data-filename');
        const page = pages.find(p => p.filename === filename);

        if (shouldTabBeLocked(filename)) {
          e.preventDefault();
          if (page && page.requiresItem && !inventory.includes(page.requiresItem)) {
            alert(`This tab is locked. You need the following item to proceed: ${items[page.requiresItem].name}`);
          } else {
            alert('This tab is currently locked. Complete your investigation first.');
          }
          return false;
        }

        if (filename && !visited.has(filename)) {
          visited.add(filename);
          saveVisitedPages();
          updateCounter();
        }

        const sidebar = document.getElementById('sidebar');
        if (window.innerWidth <= 768 && sidebar) {
          sidebar.classList.remove('open');
        }
      });
    });

    const menuToggle = document.getElementById('menuToggle');
    const sidebar = document.getElementById('sidebar');

    if (menuToggle && sidebar) {
      menuToggle.addEventListener('click', () => {
        sidebar.classList.toggle('open');
      });
    }

    document.addEventListener('click', (e) => {
      if (window.innerWidth <= 768 &&
        sidebar && !sidebar.contains(e.target) &&
        menuToggle && !menuToggle.contains(e.target) &&
        sidebar.classList.contains('open')) {
        sidebar.classList.remove('open');
      }
    });

    window.addEventListener('resize', () => {
      if (window.innerWidth > 768 && sidebar) {
        sidebar.classList.remove('open');
      }
    });
  });
</script>