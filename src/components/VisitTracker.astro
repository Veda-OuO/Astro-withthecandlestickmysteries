---
// src/components/VisitTracker.astro
import { pages } from '../data/pages.js';

export interface Props {
  pageId: string;
}

const { pageId } = Astro.props;
---

<script define:vars={{ pageId, pages }}>
  // Game state variables
  let visited = new Set();
  let examUnlocked = false;
  let whodunitUnlocked = false;
  let timeReachedZero = false;

  // Initialize from localStorage
  try {
    const stored = localStorage.getItem("visitedPages");
    if (stored) {
      const parsed = JSON.parse(stored);
      if (Array.isArray(parsed)) {
        visited = new Set(parsed);
      }
    }

    examUnlocked = localStorage.getItem("examUnlocked") === "true";
    whodunitUnlocked = localStorage.getItem("whodunitUnlocked") === "true";
    timeReachedZero = localStorage.getItem("timeReachedZero") === "true";

    // Load initialLocked state from localStorage
    pages.forEach(page => {
      if (page.type === 'link') {
        const lockedState = localStorage.getItem(`locked_${page.filename}`);
        if (lockedState !== null) {
          page.initialLocked = lockedState === "true";
        }
      }
    });
  } catch (e) {
    console.error("Error loading game state:", e);
    localStorage.removeItem("visitedPages");
  }

  function updateCounter() {
    const countedVisitedPages = [...visited].filter(filename => {
      const page = pages.find(p => p.filename === filename);
      return page && page.counted !== false;
    });

    const visitedCount = countedVisitedPages.length;
    const remainingHours = Math.max(0, 11 - visitedCount);

    const counter = document.getElementById("counter");
    if (counter) {
      counter.textContent = remainingHours;
    }

    const counterElement = counter?.parentElement;
    if (counterElement) {
      if (remainingHours <= 3) {
        counterElement.style.backgroundColor = '#ff0000';
      } else if (remainingHours <= 6) {
        counterElement.style.backgroundColor = '#ff4500';
      } else {
        counterElement.style.backgroundColor = '#8B0000';
      }
    }

    // Check if time reached zero
    if (remainingHours === 0 && !timeReachedZero) {
      handleTimeReachedZero();
    }

    return remainingHours;
  }

  function handleTimeReachedZero() {
    timeReachedZero = true;
    examUnlocked = true;
    localStorage.setItem("timeReachedZero", "true");
    localStorage.setItem("examUnlocked", "true");

    // Show modal
    showFinalLeadModal();

    // Update link states
    updateLinkStates();
  }

  function showFinalLeadModal() {
    // Create modal overlay
    const modal = document.createElement('div');
    modal.style.cssText = `
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.8);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 10000;
    `;

    // Create modal content
    const modalContent = document.createElement('div');
    modalContent.style.cssText = `
      background-color: #fff;
      padding: 30px;
      border-radius: 10px;
      text-align: center;
      max-width: 400px;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.5);
    `;

    modalContent.innerHTML = `
      <h2 style="color: #8B0000; margin-bottom: 20px;">Investigation Complete</h2>
      <p style="margin-bottom: 20px; line-height: 1.5;">This is your final lead. Finish your investigation and head to the Exam Tab.</p>
      <button id="modalClose" style="
        background-color: #8B0000;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
      ">Continue</button>
    `;

    modal.appendChild(modalContent);
    document.body.appendChild(modal);

    // Close modal handler
    document.getElementById('modalClose').addEventListener('click', () => {
      document.body.removeChild(modal);
    });

    // Close on outside click
    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        document.body.removeChild(modal);
      }
    });
  }

  function saveVisitedPages() {
    try {
      localStorage.setItem("visitedPages", JSON.stringify([...visited]));
    } catch (e) {
      console.error("Error saving visited pages:", e);
    }
  }

  function isLockableTab(filename) {
    // Tabs that should never be locked
    const neverLock = ['notes', 'rules', 'intro', 'exam', 'whodunit'];
    return !neverLock.includes(filename);
  }

  function shouldTabBeLocked(filename) {
    const page = pages.find(p => p.filename === filename);
    if (!page) return false;

    // Check initialLocked property
    if (page.initialLocked === true) {
      return true;
    }

    // Special cases
    if (filename === 'exam') {
      return !examUnlocked;
    }
    if (filename === 'whodunit') {
      return !whodunitUnlocked;
    }

    // If time hasn't reached zero, no tabs are locked (except exam/whodunit)
    if (!timeReachedZero) {
      return false;
    }

    // After time reaches zero, lock unvisited lockable tabs
    if (isLockableTab(filename) && !visited.has(filename)) {
      return true;
    }

    return false;
  }

  function updateLinkStates() {
    const links = document.querySelectorAll('.nav-link');
    links.forEach(link => {
      const filename = link.getAttribute('data-filename');
      if (!filename) return;

      // Remove all lock-related classes
      link.classList.remove('visited', 'locked');

      // Remove any existing lock icons
      const existingLock = link.querySelector('.lock-icon');
      if (existingLock) {
        existingLock.remove();
      }

      // Apply visited style
      if (visited.has(filename)) {
        link.classList.add('visited');
      }

      // Apply locked style if needed
      if (shouldTabBeLocked(filename)) {
        link.classList.add('locked');

        // Add lock icon
        const lockIcon = document.createElement('span');
        lockIcon.className = 'lock-icon';
        lockIcon.innerHTML = ' ðŸ”’';
        lockIcon.style.color = '#FFD700';
        link.appendChild(lockIcon);
      }
    });
  }

  function checkExamCompletion() {
    // Listen for exam completion event
    window.addEventListener('examCompleted', () => {
      whodunitUnlocked = true;
      localStorage.setItem("whodunitUnlocked", "true");
      updateLinkStates();
      console.log('Whodunit unlocked via exam completion');
    });

    // Also check localStorage periodically in case we're on a different page
    if (examUnlocked && !whodunitUnlocked) {
      const checkInterval = setInterval(() => {
        const unlocked = localStorage.getItem("whodunitUnlocked") === "true";
        if (unlocked && !whodunitUnlocked) {
          whodunitUnlocked = true;
          updateLinkStates();
          clearInterval(checkInterval);
        }
      }, 1000);
    }
  }

  function showNotification(message) {
    const notification = document.createElement('div');
    notification.style.cssText = `
      position: absolute;
      top: 10px;
      left: 50%;
      transform: translateX(-50%);
      background-color: rgba(0, 0, 0, 0.7);
      color: white;
      padding: 10px 20px;
      border-radius: 5px;
      z-index: 9999;
    `;
    notification.textContent = message;
    document.querySelector('.main').prepend(notification);

    setTimeout(() => {
      notification.remove();
    }, 3000);
  }

  // Mark current page as visited if not already
  if (pageId && !visited.has(pageId)) {
    console.log(`Page ${pageId} visited`); // Debugging
    visited.add(pageId);
    saveVisitedPages();

    // Handle unlocksOnVisit and locksOnVisit
    const currentPage = pages.find(p => p.filename === pageId);
    if (currentPage) {
      console.log(`Current page found: ${currentPage.title}`); // Debugging
      let notificationMessage = '';

      if (currentPage.unlocksOnVisit) {
        console.log(`Unlocking on visit: ${currentPage.unlocksOnVisit}`); // Debugging
        currentPage.unlocksOnVisit.forEach(filename => {
          const pageToUnlock = pages.find(p => p.filename === filename);
          if (pageToUnlock) {
            console.log(`Page to unlock found: ${pageToUnlock.title}`); // Debugging
            pageToUnlock.initialLocked = false;
            localStorage.setItem(`locked_${pageToUnlock.filename}`, "false"); // Save to localStorage
            notificationMessage += `${pageToUnlock.title} unlocked. `;
          } else {
            console.log(`Page to unlock NOT found: ${filename}`); // Debugging
          }
        });
      }

      if (currentPage.locksOnVisit) {
        console.log(`Locking on visit: ${currentPage.locksOnVisit}`); // Debugging
        currentPage.locksOnVisit.forEach(filename => {
          const pageToLock = pages.find(p => p.filename === filename);
          if (pageToLock) {
            console.log(`Page to lock found: ${pageToLock.title}`); // Debugging
            pageToLock.initialLocked = true;
            localStorage.setItem(`locked_${pageToLock.filename}`, "true"); // Save to localStorage
            notificationMessage += `${pageToLock.title} locked. `;
          } else {
             console.log(`Page to lock NOT found: ${filename}`); // Debugging
          }
        });
      }

      if (notificationMessage) {
        console.log(`Notification message: ${notificationMessage}`); // Debugging
        showNotification(notificationMessage);
      } else {
        console.log("No notification message"); // Debugging
      }

      // Update link states after unlocking/locking
      updateLinkStates();
    } else {
      console.log(`Current page NOT found for pageId: ${pageId}`); // Debugging
    }
  }

  // Update counter and link states on page load
  document.addEventListener('DOMContentLoaded', () => {
    updateCounter();
    updateLinkStates();

    // Check exam completion if on exam page
    if (pageId === 'exam') {
      checkExamCompletion();
    }

    // Handle navigation clicks
    const links = document.querySelectorAll('.nav-link');
    links.forEach(link => {
      link.addEventListener('click', (e) => {
        const filename = link.getAttribute('data-filename');

        // Prevent navigation to locked tabs
        if (shouldTabBeLocked(filename)) {
          e.preventDefault();

          // Show locked message
          alert('This tab is currently locked. Complete your investigation first.');
          return false;
        }

        if (filename && !visited.has(filename)) {
          visited.add(filename);
          saveVisitedPages();
          updateCounter();
        }

        // Close sidebar on mobile after clicking
        const sidebar = document.getElementById('sidebar');
        if (window.innerWidth <= 768 && sidebar) {
          sidebar.classList.remove('open');
        }
      });
    });

    // Mobile menu toggle
    const menuToggle = document.getElementById('menuToggle');
    const sidebar = document.getElementById('sidebar');

    if (menuToggle && sidebar) {
      menuToggle.addEventListener('click', () => {
        sidebar.classList.toggle('open');
      });
    }

    // Close sidebar when clicking outside on mobile
    document.addEventListener('click', (e) => {
      if (window.innerWidth <= 768 &&
        sidebar && !sidebar.contains(e.target) &&
        menuToggle && !menuToggle.contains(e.target) &&
        sidebar.classList.contains('open')) {
        sidebar.classList.remove('open');
      }
    });

    // Handle resize events
    window.addEventListener('resize', () => {
      if (window.innerWidth > 768 && sidebar) {
        sidebar.classList.remove('open');
      }
    });
  });
</script>